
#pragma target 5.0

#define CONVERT

#define maybeGlobal	globallycoherent

#define RAWBUFFER

#ifdef CONVERT
	#define vec2	float2
	#define vec3	float3
	#define vec4	float4
	#define uvec2	uint2
	#define uvec3	uint3
	#define uvec4	uint4
	#define ivec2	int2
	#define ivec3	int3
	#define ivec4	int4
	#define bvec2	bool2
	#define bvec3	bool3
	#define bvec4	bool4
	#define mat4	float4x4
#endif

#define NODE_SIZE		16
#define HEADER_SIZE		4
#define ATT_NUM			4
#define CHILD_NUM		8
#define THREAD_COUNT	4096
#define RSRC_PER		3
#define RSRC_SIZE		2
#define RSRC_IDX_OFFSET THREAD_COUNT * RSRC_PER * RSRC_SIZE
#define ROOT_TASK		RSRC_IDX_OFFSET + THREAD_COUNT * RSRC_PER
#define GROUP_SIZE		64

#define NOT_THERE	0x7FFFFFFF
#define CACHED		0x80000000

#define NODE_PLAIN_COLOR	0x00000000
#define NODE_TEXTURE_MAP	0x00000001







/*
** Global values and struct defs for managing common resources
**
** Struct types with the word "Node" correspond to the contents of nodes
**
** Line comments are the 32-bit fields in which the corresponding member
** exists when stored in a node in the DataBuffer
**
*/

struct voxelNode{
    uint meta;// 0
    uint surface;// 1
    uint light;// 2
    uint overlap;// 3
    uvec4 attributes;// 4-7
    uint child[8];// 8-15
};

struct traceNode{
    uint last;// 0
    uint next;// 1
    uint host;// 2
    uint stateStackTop;// 3
    uint stateStackCount;// 4
    uint matStackTop;// 5
    uint matStackCount;// 6
    uint overlapHead;// 7
    float timeLeft;// 8
    uint state;	// 9
    vec3 position;// 10-12
    vec3 velocity;// 13-15
};

struct traceTaskNode{
	uint next;// 0
    uint parent;// 1
    uint childCount;// 2
    vec3 position;// 4-6
    vec3 velocity;// 7-9
    vec3 lightMask;// 10-12
    vec3 lightSample;// 13-15
};

struct basicToolTaskNode{
	uint next;// 0
	uint parent;// 1
	uint childCount;// 2
	uint state; // 3
    uint hostNode; // 4
    vec3 position; // 5-7
};

struct block{
    uint parent;
    uint referenceCount;
    uint type;
    uint root;
	mat4 transformation;
};

// Used for keeping track of task and heap resources
static uint heapIdxs_loc[2];
static uint heapCounts_loc[2];
static uint heapHeads_loc[2];

static uint taskQIdxs_loc[2];
static uint taskQCounts_loc[2];
static uint taskQHeads_loc[2];

// Used to identify which thread is executing code
static uint id;

// Used to identify which thread resources are being swapped with
static uint swapBit;



/// Yggdrasil Buffer Definitions

#ifdef RAWBUFFER

maybeGlobal RWByteAddressBuffer DataBuffer : register (u0);

maybeGlobal RWStructuredBuffer<block> BlockBuffer : register (u1);

maybeGlobal RWByteAddressBuffer HeapBuffer : register (u2);

maybeGlobal RWByteAddressBuffer TaskBuffer : register (u3);

maybeGlobal RWByteAddressBuffer ExchangeBuffer : register (u4);

#else

maybeGlobal RWStructuredBuffer<uint> DataBuffer : register (u0);
//layout(std430, binding = 0) buffer DataBuffer { uint data[]; };

maybeGlobal RWStructuredBuffer<block> BlockBuffer : register (u1);
//layout(std430, binding = 1) buffer BlockBuffer { block data[]; };

maybeGlobal RWStructuredBuffer<uint> HeapBuffer : register (u2);
//layout(std430, binding = 2) buffer HeapBuffer { uint data[ROOT_TASK]; };

maybeGlobal RWStructuredBuffer<uint> TaskBuffer : register (u3);
//layout(std430, binding = 3) buffer TaskBuffer { uint data[ROOT_TASK+1]; };

maybeGlobal RWStructuredBuffer<uint> ExchangeBuffer : register (u4);
//layout(std430, binding = 4) buffer ExchangeBuffer { uint data[]; };

#endif




/// Direct Node Member Access Macros
#ifdef RAWBUFFER
	#define loadRawNode(node,idx)				DataBuffer.Load( ( ( node ) * NODE_SIZE + ( idx ) ) * 4 )
	#define storeRawNode(node,idx,val)			DataBuffer.Store( ( ( node ) * NODE_SIZE + ( idx ) ) * 4 , val )
	#define loadHeap(idx)						HeapBuffer.Load( ( idx ) * 4 )
	#define storeHeap(idx,val)					HeapBuffer.Store( ( idx ) * 4 , val )
	#define loadTask(idx)						TaskBuffer.Load( ( idx ) * 4 )
	#define storeTask(idx,val)					TaskBuffer.Store( ( idx ) * 4 , val )
	#define loadExchange(idx)					ExchangeBuffer.Load( ( idx ) * 4 )
	#define storeExchange(idx,val)				ExchangeBuffer.Store( ( idx ) * 4 , val )
	#define atomicSwapHeap(idx,val,ret)			HeapBuffer.InterlockedExchange( ( idx ) * 4 , val , ret )
#else
	#define loadRawNode(node,idx)				DataBuffer[ ( node ) * NODE_SIZE + ( idx ) ]
	#define storeRawNode(node,idx,val)			DataBuffer[ ( node ) * NODE_SIZE + ( idx ) ] = val
	#define loadHeap(idx)						HeapBuffer[ idx ]
	#define storeHeap(idx,val)					HeapBuffer[ idx ] = val
	#define loadTask(idx)						TaskBuffer[ idx ]
	#define storeTask(idx,val)					TaskBuffer[ idx ] = val
	#define loadExchange(idx)					ExchangeBuffer[ idx ]
	#define storeExchange(idx,val)				ExchangeBuffer[ idx ] = val
	#define atomicSwapHeap(idx,val,ret)			InterlockedExchange( HeapBuffer[ idx ] , val , ret );
#endif

#define loadVoxelMeta(node)					loadRawNode( node , 0 )
#define loadVoxelSurface(node)				loadRawNode( node , 1 )
#define loadVoxelLight(node)				loadRawNode( node , 2 )
#define loadVoxelOverlap(node)				loadRawNode( node , 3 )
#define loadVoxelAttribute(node,idx)		loadRawNode( node , 4 + idx )
#define loadVoxelChild(node,idx)			loadRawNode( node , 8 + idx )

#define loadTraceLast(node)					loadRawNode( node , 0 )
#define loadTraceNext(node)					loadRawNode( node , 1 )
#define loadTraceHostNode(node)				loadRawNode( node , 2 )
#define loadTraceStateStackTop(node)		loadRawNode( node , 3 )
#define loadTraceStateStackCount(node)		loadRawNode( node , 4 )
#define loadTraceMatStackTop(node)			loadRawNode( node , 5 )
#define loadTraceMatStackCount(node)		loadRawNode( node , 6 )
#define loadTraceOverlapHead(node)			loadRawNode( node , 7 )
#define loadTraceTimeLeft(node)				loadRawNode( node , 8 )
#define loadTraceState(node)				loadRawNode( node , 9 )
#define loadTracePosition(node,idx)			loadRawNode( node , 10 + idx )
#define loadTraceVelocity(node,idx)			loadRawNode( node , 13 + idx )


#define loadTaskNext(node)					loadRawNode( node , 0 )
#define loadTaskParent(node)				loadRawNode( node , 1 )
#define loadTaskChildCount(node)			loadRawNode( node , 2 )

#define loadTraceTaskPosition(node,idx)		loadRawNode( node , 4 + idx )
#define loadTraceTaskVelocity(node,idx)		loadRawNode( node , 7 + idx )
#define loadTraceTaskLightMask(node,idx)	loadRawNode( node , 10 + idx )
#define loadTraceTaskLightSample(node,idx)	loadRawNode( node , 13 + idx )

#define loadBasicToolTaskState(node)		loadRawNode( node , 3 )
#define loadBasicToolTaskHost(node)			loadRawNode( node , 4 )
#define loadBasicToolPosition(node,idx)		loadRawNode( node , 5 + idx )


#define storeVoxelMeta(node,val)				storeRawNode( node , 0 , val )
#define storeVoxelSurface(node,val)				storeRawNode( node , 1 , val )
#define storeVoxelLight(node,val)				storeRawNode( node , 2 , val )
#define storeVoxelOverlap(node,val)				storeRawNode( node , 3 , val )
#define storeVoxelAttribute(node,idx,val)		storeRawNode( node , 4 + idx , val )
#define storeVoxelChild(node,idx,val)			storeRawNode( node , 8 + idx , val )

#define storeTraceLast(node,val)				storeRawNode( node , 0 , val )
#define storeTraceNext(node,val)				storeRawNode( node , 1 , val )
#define storeTraceHostNode(node,val)			storeRawNode( node , 2 , val )
#define storeTraceStateStackTop(node,val)		storeRawNode( node , 3 , val )
#define storeTraceStateStackCount(node,val)		storeRawNode( node , 4 , val )
#define storeTraceMatStackTop(node,val)			storeRawNode( node , 5 , val )
#define storeTraceMatStackCount(node,val)		storeRawNode( node , 6 , val )
#define storeTraceOverlapHead(node,val)			storeRawNode( node , 7 , val )
#define storeTraceTimeLeft(node,val)			storeRawNode( node , 8 , val )
#define storeTraceState(node,val)				storeRawNode( node , 9 , val )
#define storeTracePosition(node,idx,val)		storeRawNode( node , 10 + idx , val )
#define storeTraceVelocity(node,idx,val)		storeRawNode( node , 13 + idx , val )


#define storeTaskNext(node,val)					storeRawNode( node , 0 , val )
#define storeTaskParent(node,val)				storeRawNode( node , 1 , val )
#define storeTaskChildCount(node,val)			storeRawNode( node , 2 , val )

#define storeTraceTaskPosition(node,idx,val)	storeRawNode( node , 4 + idx , val )
#define storeTraceTaskVelocity(node,idx,val)	storeRawNode( node , 7 + idx , val )
#define storeTraceTaskLightMask(node,idx,val)	storeRawNode( node , 10 + idx , val )
#define storeTraceTaskLightSample(node,idx,val)	storeRawNode( node , 13 + idx , val )

#define storeBasicToolTaskState(node,val)		storeRawNode( node , 3 , val )
#define storeBasicToolTaskHost(node,val)		storeRawNode( node , 4 , val )
#define storeBasicToolPosition(node,idx,val)	storeRawNode( node , 5 + idx , val )


/// Node Loading/Storing



voxelNode voxelLoad(in uint node){
	voxelNode result;
	result.meta = loadVoxelMeta(node);
	result.surface = loadVoxelSurface(node);
	result.light = loadVoxelLight(node);
	result.overlap = loadVoxelOverlap(node);
	result.attributes = uvec4(
							loadVoxelAttribute(node,0),
							loadVoxelAttribute(node,1),
							loadVoxelAttribute(node,2),
							loadVoxelAttribute(node,3)
						);
	
	result.child[0] = loadVoxelChild(node,0);
	result.child[1] = loadVoxelChild(node,1);
	result.child[2] = loadVoxelChild(node,2);
	result.child[3] = loadVoxelChild(node,3);
	result.child[4] = loadVoxelChild(node,4);
	result.child[5] = loadVoxelChild(node,5);
	result.child[6] = loadVoxelChild(node,6);
	result.child[7] = loadVoxelChild(node,7);

	return result;
}


void voxelStore(in uint node, in voxelNode data){
	storeVoxelMeta(node,data.meta);
	storeVoxelSurface(node,data.surface);
	storeVoxelLight(node,data.light);
	storeVoxelOverlap(node,data.overlap);
	storeVoxelAttribute(node,0,data.attributes.x);
	storeVoxelAttribute(node,1,data.attributes.y);
	storeVoxelAttribute(node,2,data.attributes.z);
	storeVoxelAttribute(node,3,data.attributes.w);
	for(int i = 0; i < 8; i++){
		storeVoxelChild(node,i,data.child[i]);
	}
}


// This loads a trace node from the data buffer to local registers
inline traceNode traceLoad(in uint node){
	traceNode result;
    result.last =				loadTraceLast(node);
	result.next =				loadTraceNext(node);
    result.host =				loadTraceHostNode(node);
    result.stateStackTop =		loadTraceStateStackTop(node);
    result.stateStackCount =	loadTraceStateStackCount(node);
    result.matStackTop =		loadTraceMatStackTop(node);
    result.matStackCount =		loadTraceMatStackCount(node);
    result.overlapHead =		loadTraceOverlapHead(node);
    result.timeLeft =			asfloat(loadTraceTimeLeft(node));
    result.state =				loadTraceState(node);
    result.position = 	vec3(	asfloat(loadTracePosition(node,0)),
								asfloat(loadTracePosition(node,1)),
								asfloat(loadTracePosition(node,2)) );
    result.velocity = 	vec3(	asfloat(loadTraceVelocity(node,0)),
								asfloat(loadTraceVelocity(node,1)),
								asfloat(loadTraceVelocity(node,2)) );
    return result;
}

// This stores a trace node from local registers to the data buffer
inline void traceStore(in uint node, in traceNode trace){
	storeTraceNext(node,trace.next);
	storeTraceHostNode(node,trace.host);
	storeTraceStateStackTop(node,trace.stateStackTop);
	storeTraceStateStackCount(node,trace.stateStackCount);
	storeTraceMatStackTop(node,trace.matStackTop);
	storeTraceMatStackCount(node,trace.matStackCount);
	storeTraceOverlapHead(node,trace.overlapHead);
	storeTraceTimeLeft(node,asuint(trace.timeLeft));
	storeTraceState(node,trace.state);
	storeTracePosition(node,0,asuint(trace.position.x));
	storeTracePosition(node,1,asuint(trace.position.y));
	storeTracePosition(node,2,asuint(trace.position.z));
	storeTraceVelocity(node,0,asuint(trace.velocity.x));
	storeTraceVelocity(node,1,asuint(trace.velocity.y));
	storeTraceVelocity(node,2,asuint(trace.velocity.z));
}


inline traceNode blankTrace(){
	traceNode result;
    result.last =				0;
	result.next =				0;
    result.host =				0;
    result.stateStackTop =		0;
    result.stateStackCount =	0;
    result.matStackTop =		0;
    result.matStackCount =		0;
    result.overlapHead = 		0;
    result.timeLeft =			0;
    result.state = 				0;
    result.position = 	vec3(	0,
								0,
								0 );
    result.velocity = 	vec3(	0,
								0,
								0 );
    return result;
}


inline basicToolTaskNode basicToolTaskLoad(in uint node){
	basicToolTaskNode result;
	result.next			= loadTaskNext(node);
	result.parent		= loadTaskParent(node);
	result.childCount	= loadTaskChildCount(node);
	result.state		= loadBasicToolTaskState(node);
	result.hostNode		= loadBasicToolTaskHost(node);
	result.position = 	vec3(	asfloat( loadBasicToolPosition(node,0) ),
								asfloat( loadBasicToolPosition(node,1) ),
								asfloat( loadBasicToolPosition(node,2) ) );
	return result;
}

inline void basicToolTaskStore(in uint node, in basicToolTaskNode data){
	storeTaskNext(node,data.next);
	storeTaskParent(node,data.parent);
	storeTaskChildCount(node,data.childCount);
	storeBasicToolTaskState(node,data.state);
	storeBasicToolTaskHost(node,data.hostNode);
	storeBasicToolPosition(node,0,asuint(data.position.x));
	storeBasicToolPosition(node,1,asuint(data.position.y));
	storeBasicToolPosition(node,2,asuint(data.position.z));
}

inline traceTaskNode traceTaskLoad(in uint node){
	traceTaskNode result;
	result.next					= loadTaskNext(node);
	result.parent				= loadTaskParent(node);
	result.childCount			= loadTaskChildCount(node);
	result.position				=	vec3(	loadTraceTaskPosition(node,0),
											loadTraceTaskPosition(node,1),
											loadTraceTaskPosition(node,2)	);
	result.velocity				=	vec3(	loadTraceTaskVelocity(node,0),
											loadTraceTaskVelocity(node,1),
											loadTraceTaskVelocity(node,2)	);
	result.lightMask			=	vec3(	loadTraceTaskLightMask(node,0),
											loadTraceTaskLightMask(node,1),
											loadTraceTaskLightMask(node,2)	);
	result.lightSample			=	vec3(	loadTraceTaskLightSample(node,0),
											loadTraceTaskLightSample(node,1),
											loadTraceTaskLightSample(node,2));
	return result;
}


inline void traceTaskStore(in uint node, in traceTaskNode data){
	storeTaskNext(node,data.next);
	storeTaskParent(node,data.parent);
	storeTaskChildCount(node,data.childCount);
	storeTraceTaskPosition(node,0,data.position.x);
	storeTraceTaskPosition(node,1,data.position.y);
	storeTraceTaskPosition(node,2,data.position.z);
	storeTraceTaskVelocity(node,0,data.velocity.x);
	storeTraceTaskVelocity(node,1,data.velocity.y);
	storeTraceTaskVelocity(node,2,data.velocity.z);
	storeTraceTaskLightMask(node,0,data.lightMask.x);
	storeTraceTaskLightMask(node,1,data.lightMask.y);
	storeTraceTaskLightMask(node,2,data.lightMask.z);
	storeTraceTaskLightSample(node,0,data.lightSample.x);
	storeTraceTaskLightSample(node,0,data.lightSample.y);
	storeTraceTaskLightSample(node,0,data.lightSample.z);
}



/// Resource Value Indexing Functions


inline uint rsrcHeadIdx(in uint idx){
	return RSRC_SIZE * idx;
}


inline uint rsrcCountIdx(in uint idx){
	return RSRC_SIZE * idx + 1;
}

/*
** Returns the index in the heap buffer where the head of the thread's
** idx-th heap list is stored.
*/
inline uint heapHeadIdx(in uint idx){
	return rsrcHeadIdx(heapIdxs_loc[idx]);
}

/*
** Returns the index in the heap buffer where the head of the thread's
** idx-th heap count is stored.
*/
inline uint heapCountIdx(in uint idx){
	return rsrcCountIdx(heapIdxs_loc[idx]);
}

/*
** Returns the index in the heap buffer where the index of the global heap list
** of the idx-th thread is stored
*/
inline uint heapIdxIdx(in uint idx){
	return RSRC_IDX_OFFSET + idx;
}

/*
** Returns the index in the task buffer where the head of the thread's
** idx-th task list is stored.
*/
inline uint taskQHeadIdx(in uint idx){
	return rsrcHeadIdx(taskQIdxs_loc[idx]);
}

/*
** Returns the index in the task buffer where the head of the thread's
** idx-th task count is stored.
*/
inline uint taskQCountIdx(in uint idx){
	return rsrcCountIdx(taskQIdxs_loc[idx]);
}

/*
** Returns the index in the task buffer where the index of the global task list
** of the idx-th thread is stored
*/
inline uint taskQIdxIdx(in uint idx){
	return RSRC_IDX_OFFSET + idx;
}




/// Memory Management Functions

// Returns the index of a free node from the largest local memory list
inline uint allocNode(){
	// Get the index of the head of the bigger list and set result to its value
	uint bigger = uint(heapCounts_loc[0]<heapCounts_loc[1]);
	uint result = heapHeads_loc[bigger];
	// If the result is non-null, its listed 'next' address is set as the head
	if( ( result & NOT_THERE )  != NOT_THERE ){
		heapHeads_loc[bigger] = loadRawNode(result,0);
		heapCounts_loc[bigger]--;
	}
	return result;
}

// Adds the node at the given address to the smallest local memory list
inline void freeNode( in uint node ){
	uint smaller = uint(heapCounts_loc[0]>heapCounts_loc[1]);
	if ( ( node & NOT_THERE ) != NOT_THERE ) {
		storeRawNode(node, 0, heapHeads_loc[smaller]);
		heapHeads_loc[smaller] = node;
		heapCounts_loc[smaller]++;
	}
}

/*
** Removes up to len nodes from the larger local memory list and adds it to
** the front of the smaller local memory list.
*/
inline void levelHeaps( in uint len ){
	// Find which lists are bigger than which
	uint bigger = uint(heapCounts_loc[0]<heapCounts_loc[1]);
	uint smaller = 1-bigger;
	// Calculate the difference in size
	uint diff = abs(((int) heapCounts_loc[0]) - ((int)heapCounts_loc[1]));
	// Set an iterator to the head of the larger list
	uint iter = heapHeads_loc[bigger];
	uint holder;
	// Traverse down the list diff-1 times
	for(uint i = 0; i < len; i++){
		if(i < diff - 1){
			iter = loadRawNode(iter,0);
		}
	}
	// Perform a swap between list heads only if there are nodes to be swapped
	if(diff > 0){
		holder = heapHeads_loc[bigger];
		heapHeads_loc[bigger] = loadRawNode(iter,0);
		storeRawNode(iter,0,heapHeads_loc[smaller]);
        heapHeads_loc[smaller] = holder;
		heapCounts_loc[smaller] += diff;
		heapCounts_loc[bigger] += diff;
	}
}

/*
** Pushes the head and count of the given heap to their corresponding location
** in the heap buffer.
*/
inline void pushHeap(in uint idx){
	
	storeHeap(heapHeadIdx(idx),heapHeads_loc[idx]);
	storeHeap(heapCountIdx(idx),heapCounts_loc[idx]);
	
	/*
	InterlockedExchange(
		HeapBuffer[heapHeadIdx(idx)],
		heapHeads_loc[idx],
		heapHeads_loc[idx]
	);
	InterlockedExchange(
		HeapBuffer[heapCountIdx(idx)],
		heapCounts_loc[idx],
		heapCounts_loc[idx]
	);
	*/
}

/*
** Pulls the head and count of the given heap to their corresponding location
** in the heap buffer.
*/
inline void pullHeap(in uint idx){
	
	heapHeads_loc[idx] = loadHeap(heapHeadIdx(idx));
	heapCounts_loc[idx] = loadHeap(heapCountIdx(idx));
	
	/*
	InterlockedExchange(
		HeapBuffer[heapHeadIdx(idx)],
		heapHeads_loc[idx],
		heapHeads_loc[idx]
	);
	InterlockedExchange(
		HeapBuffer[heapCountIdx(idx)],
		heapCounts_loc[idx],
		heapCounts_loc[idx]
	);
	*/
}


/*
** Rotates the memory heaps for the thread, shuffling data in global memory
** as well as swapping lists back and forth from global memory to local memory.
*/
inline void rotateHeaps() {
	// Prep heap data in heap buffer for swapping
	//pushHeap(0);
	storeHeap(RSRC_SIZE * heapIdxs_loc[0],heapHeads_loc[0]);
	storeHeap(RSRC_SIZE * heapIdxs_loc[0] + 1,heapCounts_loc[0]);

	/*
	** Calculate the bit that will be flipped to find this thread's swapping
	** partner.
	*/
	uint swpIdx = id ^ swapBit;
	uint swapy = 0;
	uint swapo = NOT_THERE;

	// Swaps the index of our first local list with our partner's swap list
	DeviceMemoryBarrier();
	if (id < swpIdx) {
		InterlockedExchange(
			loadHeap(RSRC_IDX_OFFSET + swpIdx),
			heapIdxs_loc[0],
			heapIdxs_loc[0]
		);
	}
	DeviceMemoryBarrier();

	// Sets the swapBit for the next swap execution
	swapBit = swapBit << 1;
	swapBit = (swapBit >= THREAD_COUNT) ? 1 : swapBit;
	// Pulls the heads and counts of the new local lists

    //pullHeap(0);
	heapHeads_loc[0] = loadHeap(RSRC_SIZE * heapIdxs_loc[0] );
	heapCounts_loc[0] = loadHeap(RSRC_SIZE * heapIdxs_loc[0] + 1);

}




/// Task Management Functions

// Returns the index of a free node from the largest local task list
inline uint grabTask(){
	// Get the index of the head of the bigger list and set result to its value
	uint bigger = uint(taskQCounts_loc[0]<taskQCounts_loc[1]);
	uint result = taskQHeads_loc[bigger];
	// If the result is non-null, its listed 'next' address is set as the head
	if(result != NOT_THERE){
		taskQHeads_loc[bigger] = loadTaskNext(result);
		taskQCounts_loc[bigger]--;
	}
	return result;
}


// Adds the node at the given address to the smallest local task list
inline void postTask( in uint node ){
	uint smaller = uint(taskQCounts_loc[0]>taskQCounts_loc[1]);
	storeTaskNext(node,taskQHeads_loc[smaller]);
	taskQHeads_loc[smaller] = node;
	taskQCounts_loc[smaller]++;
}


/*
** Removes up to len nodes from the larger local task list and adds it to
** the front of the smaller local task list.
*/
inline void levelTasks( in uint len ){
	// Find which lists are bigger than which
	uint bigger = uint(taskQCounts_loc[0]<taskQCounts_loc[1]);
	uint smaller = 1-bigger;
	// Calculate the difference in size
	uint diff = abs(taskQCounts_loc[0]-taskQCounts_loc[1]);
	// Set an iterator to the head of the larger list
	uint iter = taskQHeads_loc[bigger];
	uint holder;
	// Traverse down the list diff-1 times
	for(uint i = 0; i < len; i++){
		if(i < diff - 1){
			iter = loadTaskNext(iter);
		}
	}
	// Perform a swap between list heads only if there are nodes to be swapped
	if(diff > 0){
		holder = taskQHeads_loc[bigger];
		taskQHeads_loc[bigger] = loadTaskNext(iter);
		storeTaskNext(iter,taskQHeads_loc[smaller]);
        taskQHeads_loc[smaller] = holder;
		taskQCounts_loc[smaller] += diff;
		taskQCounts_loc[bigger] += diff;
	}
}



/*
** Pushes the head and count of the given heap to their corresponding location
** in the task buffer.
*/
inline void pushTaskQ(in uint idx){
	storeTask(taskQHeadIdx(idx),taskQHeads_loc[idx]);
	storeTask(taskQCountIdx(idx),taskQCounts_loc[idx]);
}

/*
** Pulls the head and count of the given heap to their corresponding location
** in the task buffer.
*/
inline void pullTaskQ(in uint idx){
	taskQHeads_loc[idx] = loadTask(taskQHeadIdx(idx));
	taskQCounts_loc[idx] = loadTask(taskQCountIdx(idx));
}

/*
** Rotates the memory heaps for the thread, shuffling data in global memory
** as well as swapping lists back and forth from global memory to local memory.
*/
inline void rotateTaskQs(){

	// Prep task data in the task buffer for swapping
	pushTaskQ(0);
	pushTaskQ(1);

	/*
	** Calculate the bit that will be flipped to find this thread's swapping
	** partner.
	*/
	uint swpIdx = id ^ swapBit;

	// Swaps the index of our first local list with our partner's swap list
    InterlockedExchange(
						loadTask(taskQIdxIdx(swpIdx)),
						taskQIdxs_loc[0],
						taskQIdxs_loc[0]
					);
	// Swaps the index of our first local list with that of our global swap list
	InterlockedExchange(
						loadTask(taskQIdxIdx(id)),
						taskQIdxs_loc[1],
						taskQIdxs_loc[1]
					);
	// Swaps the order of our two local lists
	uint temp = taskQIdxs_loc[0];
	taskQIdxs_loc[0] = taskQIdxs_loc[1];
	taskQIdxs_loc[1] = temp;

	// Sets the swapBit for the next swap execution
	swapBit = swapBit << 1;
	swapBit = (swapBit >= THREAD_COUNT) ? 1 : swapBit;
	// Pulls the heads and counts of the new local lists
    pullTaskQ(0);
    pullTaskQ(1);
}




/// Unsigned Int Stack

/*
** Given the head node of the stack and the number of elements currently in
** the stack, it allocates a new node if necessary and stores val in the head
** node.
*/
inline void pushStackUint(inout uint top, inout uint count, in uint val){
	// This finds where in a head node's data field the value should be stored
	uint modPt = count % (NODE_SIZE - 1);
	uint result = top;
	// If the count rolls into a new node, it is allocated and made the head
    if( modPt == 0 ){
		result = allocNode();
		storeRawNode(result,0,top);
		top = result;
    }
    // Stores the data
    storeRawNode(top,1+modPt,val);
    count++;
}


/*
** Given the head node of the stack and the number of elements currently in
** the stack, removes the top value, changing count and top if necessary and
** freeing nodes as necessary.
*/
inline void popStackUint(inout uint top, inout uint count){
	// This finds where in a head node's data field the value should be stored
	uint modPt = count % (NODE_SIZE - 1);
	uint result = top;
	// If the count rolls out of the current head node, it is made the new head
    if( modPt == 1 ){
		result = loadRawNode(top,0);
		freeNode(top);
		top = result;
    }
    count--;
}

// So we can read and write to the stack top cleanly
#define loadStackTopUint(top,count) loadRawNode( top, 1 + ( ( count - 1 ) % ( NODE_SIZE - 1 ) ) )
#define storeStackTopUint(top,count,val) storeRawNode( top, 1 + ( ( count - 1 ) % ( NODE_SIZE - 1 ) ) , val )

// Traverses down the linked list making up the stack, freeing nodes as it goes
inline void destroyStackUint(inout uint top, inout uint count){
	uint iter = top;
	uint next;
	while(iter != NOT_THERE){
		next = loadRawNode(iter,0);
		freeNode(iter);
		iter = next;
	}
	top = NOT_THERE;
	count = 0;
}



/// Uvec3 Stack

/*
** Given the head node of the stack and the number of elements currently in
** the stack, it allocates a new node if necessary and stores val in the head
** node.
*/
inline void pushStackUvec3(inout uint top, inout uint count, in uvec3 val){
	// Find which triplet of fields in a head node val should be stored
	// (keep in mind, 16-1=15, which is divisible by 3), so no space is wasted
	uint modPt = (count * 3) % (NODE_SIZE - 1);
	uint result = top;
	// Allocate a new node and make it the head of the list, if necessary
    if( modPt == 0 ){
		result = allocNode();
		storeRawNode(result,0,top);
		top = result;
    }
    // load in the new data
    storeRawNode(top, 1 + modPt, val.x);
    storeRawNode(top, 1 + 1 + modPt, val.y);
    storeRawNode(top, 1 + 2 + modPt, val.z);
    count++;
}

/*
** Given the head node of the stack and the number of elements currently in
** the stack, removes the top value, changing count and top if necessary and
** freeing nodes as necessary.
*/
inline void popStackUvec3(inout uint top, inout uint count){
	uint modPt = (count * 3) % (NODE_SIZE - 1);
	uint result = top;
    if( modPt == 3 ){
		result = loadRawNode(top,0);
		freeNode(top);
		top = result;
    }
    count--;
}

// Returns the uvec3 at the top of the stack
inline uvec3 readTopUvec3(inout uint top, inout uint count){
	uint idx = 1 + ( (count * 3) % ( NODE_SIZE - 1 ) );
	return uvec3( 	loadRawNode(top, idx),
					loadRawNode(top, idx + 1),
					loadRawNode(top, idx + 2)	);
}

// Overwrites the given uvec3 to the top of the stack
inline void writeTopUvec3(inout uint top, inout uint count, uvec3 data){
	uint idx =  1 + ( (count * 3) % ( NODE_SIZE - 1 ) );
	storeRawNode(top,idx,data.x);
	storeRawNode(top,idx+1,data.y);
	storeRawNode(top,idx+2,data.z);
}

// Traverses down the linked list making up the stack, freeing nodes as it goes
inline void destroyStackUvec3(inout uint top, inout uint count){
	uint iter = top;
	uint next;
	while(iter != NOT_THERE){
		next = loadRawNode(iter,0);
		freeNode(iter);
		iter = next;
	}
	top = NOT_THERE;
	count = 0;
}



/// Voxel State Traversal Functions



/*
** Overwrites the given voxel address with the address of its child at the given
** relative position, unless that child is not in the Voxel State. Likewise, the
** relative position is changed to match the space of the child voxel, should
** the child actually exist in the Voxel State. Additionally, this function
** returns true if a new child was found and false if no child was found.
*/
inline bool childSeek(	inout uint voxel, inout vec3 position ){
	uint idx = 0;
	vec3 posStep = step(position,vec3(0.0,0.0,0.0));
	idx = uint(dot(posStep,vec3(1.0,2.0,4.0)));
	uint addr = loadVoxelChild(voxel,idx);
	if(addr | NOT_THERE != NOT_THERE){
		voxel = addr;
		position = fmod(position,1.0) * 2.0;
		return true;
	}
    return false;
}

/// Program resource initialization/cleanup

inline void initYggCompute(){
	// Get our thread id

	// Remove any
	/*
	for(uint i = 0; i < RSRC_PER; i++){
		TaskBuffer[rsrcHeadIdx(id * RSRC_PER + i)] = NOT_THERE;
		TaskBuffer[rsrcCountIdx(id * RSRC_PER + i)] = 0;
	}
	*/

	/*
	** Assign the first and second heap and task list of the id-th available
	** triplet of heap and task lists.
	*/
	heapIdxs_loc[0] = id * RSRC_PER;
	heapIdxs_loc[1] = id * RSRC_PER + 1;
	taskQIdxs_loc[0] = id * RSRC_PER;
	taskQIdxs_loc[1] = id * RSRC_PER + 1;

	/*
	** Assign the third heap and task list of the id-th available triplet of
	** heap and task lists to be available in the id-th element of the
	** swapping section of their respective buffer .
	*/
	storeHeap(heapIdxIdx(id),id * RSRC_PER + 2);
	storeTask(taskQIdxIdx(id),id * RSRC_PER + 2);

	// Get the heads of each of our non-swapping lists
	pullHeap(0);
	pullHeap(1);
	pullTaskQ(0);
	pullTaskQ(1);
	// Set the swapBit to 1 so the first set of swaps will have valid pairings
	swapBit = 1;
}


inline void exitYggCompute(){
	/*
	** Push the thread's non-swapping heap memory to the heap buffer for
	** future use.
	*/
	pushHeap(0);
	pushHeap(1);
	/*
	** The task buffer's data should not need to be pushed back, as they should
	** all be empty. If this is not the case, then this is VERY BAD.
	*/
}






