
#define CONVERT

#ifdef CONVERT
	#define vec2	float2
	#define vec3	float3
	#define vec4	float4
	#define uvec2	uint2
	#define uvec3	uint3
	#define uvec4	uint4
	#define ivec2	int2
	#define ivec3	int3
	#define ivec4	int4
	#define bvec2	bool2
	#define bvec3	bool3
	#define bvec4	bool4
	#define mat4	float4x4
#endif

#define NODE_SIZE		16
#define HEADER_SIZE		4
#define ATT_NUM			4
#define CHILD_NUM		8
#define THREAD_COUNT	4096
#define RSRC_PER		3
#define RSRC_SIZE		2
#define RSRC_IDX_OFFSET THREAD_COUNT * RSRC_PER * RSRC_SIZE
#define ROOT_TASK		RSRC_IDX_OFFSET + THREAD_COUNT * RSRC_PER
#define GROUP_SIZE		64

#define NOT_THERE	0x7FFFFFFF
#define CACHED		0x80000000

#define NODE_PLAIN_COLOR	0x00000000
#define NODE_TEXTURE_MAP	0x00000001





/*
** Global values and struct defs for managing common resources
**
** Struct types with the word "Node" correspond to the contents of nodes
**
** Line comments are the 32-bit fields in which the corresponding member
** exists when stored in a node in the DataBuffer
**
*/

struct voxelNode{
    uint meta;// 0
    uint surface;// 1
    uint light;// 2
    uint overlap;// 3
    uvec4 attributes;// 4-7
    uint child[8];// 8-15
};

struct traceNode{
    uint last;// 0
    uint next;// 1
    uint host;// 2
    uint stateStackTop;// 3
    uint stateStackCount;// 4
    uint matStackTop;// 5
    uint matStackCount;// 6
    uint overlapHead;// 7
    float timeLeft;// 8
    uint state;	// 9
    vec3 position;// 10-12
    vec3 velocity;// 13-15
};

struct traceTaskNode{
	uint next;// 0
    uint parent;// 1
    uint childCount;// 2
    vec3 position;// 4-6
    vec3 velocity;// 7-9
    vec3 lightMask;// 10-12
    vec3 lightSample;// 13-15
};

struct basicToolTaskNode{
	uint next;// 0
	uint parent;// 1
	uint childCount;// 2
	uint state; // 3
    uint hostNode; // 4
    vec3 position; // 5-7
};

struct block{
    uint parent;
    uint referenceCount;
    uint type;
    uint root;
	mat4 transformation;
};

// Used for keeping track of task and heap resources
static uint heapIdxs_loc[2];
static uint heapCounts_loc[2];
static uint heapHeads_loc[2];

static uint taskQIdxs_loc[2];
static uint taskQCounts_loc[2];
static uint taskQHeads_loc[2];

// Used to identify which thread is executing code
static uint id;

// Used to identify which thread resources are being swapped with
static uint swapBit;



/// Yggdrasil Buffer Definitions

RWStructuredBuffer<uint> DataBuffer : register (u0);
//layout(std430, binding = 0) buffer DataBuffer { uint data[]; };

RWStructuredBuffer<block> BlockBuffer : register (u1);
//layout(std430, binding = 1) buffer BlockBuffer { block data[]; };

RWStructuredBuffer<uint> HeapBuffer : register (u2);
//layout(std430, binding = 2) buffer HeapBuffer { uint data[ROOT_TASK]; };

RWStructuredBuffer<uint> TaskBuffer : register (u3);
//layout(std430, binding = 3) buffer TaskBuffer { uint data[ROOT_TASK+1]; };

RWStructuredBuffer<uint> ExchangeBuffer : register (u4);
//layout(std430, binding = 4) buffer ExchangeBuffer { uint data[]; };




/// Direct Node Member Access Macros

#define rawNode(node,idx)			DataBuffer[ node * NODE_SIZE + idx ]

#define voxelMeta(node)				DataBuffer[ node * NODE_SIZE ]
#define voxelSurface(node)			DataBuffer[ node * NODE_SIZE + 1 ]
#define voxelLight(node)			DataBuffer[ node * NODE_SIZE + 2 ]
#define voxelOverlap(node)			DataBuffer[ node * NODE_SIZE + 3 ]
#define voxelAttribute(node,idx)	DataBuffer[ node * NODE_SIZE + 4 + idx ]
#define voxelChild(node,idx)		DataBuffer[ node * NODE_SIZE + 8 + idx ]

#define traceLast(node)					DataBuffer[ node * NODE_SIZE ]
#define traceNext(node)					DataBuffer[ node * NODE_SIZE + 1 ]
#define traceHostNode(node)				DataBuffer[ node * NODE_SIZE + 2 ]
#define traceStateStackTop(node)		DataBuffer[ node * NODE_SIZE + 3 ]
#define traceStateStackCount(node)		DataBuffer[ node * NODE_SIZE + 4 ]
#define traceMatStackTop(node)			DataBuffer[ node * NODE_SIZE + 5 ]
#define traceMatStackCount(node)		DataBuffer[ node * NODE_SIZE + 6 ]
#define traceOverlapHead(node)			DataBuffer[ node * NODE_SIZE + 7 ]
#define traceTimeLeft(node)				DataBuffer[ node * NODE_SIZE + 8 ]
#define traceState(node)				DataBuffer[ node * NODE_SIZE + 9 ]
#define tracePosition(node,idx)			DataBuffer[ node * NODE_SIZE + 10 + idx ]
#define traceVelocity(node,idx)			DataBuffer[ node * NODE_SIZE + 13 + idx ]


#define taskNext(node)					DataBuffer[ node * NODE_SIZE ]
#define taskParent(node)				DataBuffer[ node * NODE_SIZE + 1 ]
#define taskChildCount(node)			DataBuffer[ node * NODE_SIZE + 2 ]

#define traceTaskPosition(node,idx)		DataBuffer[ node * NODE_SIZE + 4 + idx ]
#define traceTaskVelocity(node,idx)		DataBuffer[ node * NODE_SIZE + 7 + idx ]
#define traceTaskLightMask(node,idx)	DataBuffer[ node * NODE_SIZE + 10 + idx ]
#define traceTaskLightSample(node,idx)	DataBuffer[ node * NODE_SIZE + 13 + idx ]

#define basicToolTaskState(node)		DataBuffer[ node * NODE_SIZE + 3 ]
#define basicToolTaskHost(node)			DataBuffer[ node * NODE_SIZE + 4 ]
#define basicToolPosition(node,idx)		DataBuffer[ node * NODE_SIZE + 5 + idx ]


/// Node Loading/Storing



voxelNode voxelLoad(in uint node){
	voxelNode result;
	result.meta = voxelMeta(node);
	result.surface = voxelSurface(node);
	result.light = voxelLight(node);
	result.overlap = voxelOverlap(node);
	result.attributes = 	uvec4(
							voxelAttribute(node,0),
							voxelAttribute(node,1),
							voxelAttribute(node,2),
							voxelAttribute(node,3)
						);
	
	result.child[0] = voxelChild(node,0);
	result.child[1] = voxelChild(node,1);
	result.child[2] = voxelChild(node,2);
	result.child[3] = voxelChild(node,3);
	result.child[4] = voxelChild(node,4);
	result.child[5] = voxelChild(node,5);
	result.child[6] = voxelChild(node,6);
	result.child[7] = voxelChild(node,7);

	return result;
}


void voxelStore(in uint node, in voxelNode data){
	voxelMeta(node) = data.meta;
	voxelSurface(node) = data.surface;
	voxelLight(node) = data.light;
	voxelOverlap(node) = data.overlap;
	voxelAttribute(node,0) = data.attributes.x;
	voxelAttribute(node,1) = data.attributes.y;
	voxelAttribute(node,2) = data.attributes.z;
	voxelAttribute(node,3) = data.attributes.w;
	for(int i = 0; i < 8; i++){
		voxelChild(node,i) = data.child[i];
	}
}


// This loads a trace node from the data buffer to local registers
inline traceNode traceLoad(in uint node){
	traceNode result;
    result.last =				traceLast(node);
	result.next =				traceNext(node);
    result.host =				traceHostNode(node);
    result.stateStackTop =		traceStateStackTop(node);
    result.stateStackCount =	traceStateStackCount(node);
    result.matStackTop =		traceMatStackTop(node);
    result.matStackCount =		traceMatStackCount(node);
    result.overlapHead = 		traceOverlapHead(node);
    result.timeLeft =			asfloat(traceTimeLeft(node));
    result.state = 				traceState(node);
    result.position = 	vec3(	asfloat(tracePosition(node,0)),
								asfloat(tracePosition(node,1)),
								asfloat(tracePosition(node,2)) );
    result.velocity = 	vec3(	asfloat(traceVelocity(node,0)),
								asfloat(traceVelocity(node,1)),
								asfloat(traceVelocity(node,2)) );
    return result;
}

// This stores a trace node from local registers to the data buffer
inline void traceStore(in uint node, in traceNode trace){
	traceNext(node) =				trace.next;
    traceHostNode(node) =			trace.host;
    traceStateStackTop(node) =		trace.stateStackTop;
    traceStateStackCount(node) =	trace.stateStackCount;
    traceMatStackTop(node) =		trace.matStackTop;
    traceMatStackCount(node) =		trace.matStackCount;
    traceOverlapHead(node) =		trace.overlapHead;
    traceTimeLeft(node) =			asuint(trace.timeLeft);
    traceState(node) =				trace.state;
    tracePosition(node,0) =			asuint(trace.position.x);
    tracePosition(node,1) =			asuint(trace.position.y);
    tracePosition(node,2) =			asuint(trace.position.z);
    traceVelocity(node,0) =			asuint(trace.velocity.x);
    traceVelocity(node,1) =			asuint(trace.velocity.y);
    traceVelocity(node,2) =			asuint(trace.velocity.z);
}


inline traceNode blankTrace(){
	traceNode result;
    result.last =				0;
	result.next =				0;
    result.host =				0;
    result.stateStackTop =		0;
    result.stateStackCount =	0;
    result.matStackTop =		0;
    result.matStackCount =		0;
    result.overlapHead = 		0;
    result.timeLeft =			0;
    result.state = 				0;
    result.position = 	vec3(	0,
								0,
								0 );
    result.velocity = 	vec3(	0,
								0,
								0 );
    return result;
}


inline basicToolTaskNode basicToolTaskLoad(in uint node){
	basicToolTaskNode result;
	result.next			= taskNext(node);
	result.parent		= taskParent(node);
	result.childCount	= taskChildCount(node);
	result.state		= basicToolTaskState(node);
	result.hostNode		= basicToolTaskHost(node);
	result.position = 	vec3(	asfloat(basicToolPosition(node,0)),
								asfloat(basicToolPosition(node,1)),
								asfloat(basicToolPosition(node,2)) );
	return result;
}

inline void basicToolTaskStore(in uint node, in basicToolTaskNode data){
	taskNext(node)				= data.next;
	taskParent(node)			= data.parent;
	taskChildCount(node)		= data.childCount;
	basicToolTaskState(node)	= data.state;
	basicToolTaskHost(node)	= data.hostNode;
	basicToolPosition(node,0) 	= asuint(data.position.x);
    basicToolPosition(node,1) 	= asuint(data.position.y);
    basicToolPosition(node,2) 	= asuint(data.position.z);
}

inline traceTaskNode traceTaskLoad(in uint node){
	traceTaskNode result;
	result.next= 					taskNext(node);
	result.parent =					taskParent(node);
	result.childCount =				taskChildCount(node);
	result.position =				vec3(	traceTaskPosition(node,0),
											traceTaskPosition(node,1),
											traceTaskPosition(node,2)	);
	result.velocity =				vec3(	traceTaskVelocity(node,0),
											traceTaskVelocity(node,1),
											traceTaskVelocity(node,2)	);
	result.lightMask =				vec3(	traceTaskLightMask(node,0),
											traceTaskLightMask(node,1),
											traceTaskLightMask(node,2)	);
	result.lightSample =			vec3(	traceTaskLightSample(node,0),
											traceTaskLightSample(node,1),
											traceTaskLightSample(node,2));
	return result;
}


inline void traceTaskStore(in uint node, in traceTaskNode data){
	traceTaskNode result;
	taskNext(node)					= data.next;
	taskParent(node)				= data.parent;
	taskChildCount(node)			= data.childCount;
	traceTaskPosition(node,0)		= data.position.x;
	traceTaskPosition(node,1)		= data.position.y;
	traceTaskPosition(node,2)		= data.position.z;
	traceTaskVelocity(node,0)		= data.velocity.x;
	traceTaskVelocity(node,1)		= data.velocity.y;
	traceTaskVelocity(node,2)		= data.velocity.z;
	traceTaskLightMask(node,0)		= data.lightMask.x;
	traceTaskLightMask(node,1)		= data.lightMask.y;
	traceTaskLightMask(node,2)		= data.lightMask.z;
	traceTaskLightSample(node,0)	= data.lightSample.x;
	traceTaskLightSample(node,0)	= data.lightSample.y;
	traceTaskLightSample(node,0)	= data.lightSample.z;
}



/// Resource Value Indexing Functions


inline uint rsrcHeadIdx(in uint idx){
	return RSRC_SIZE * idx;
}

inline uint rsrcCountIdx(in uint idx){
	return RSRC_SIZE * idx + 1;
}

/*
** Returns the index in the heap buffer where the head of the thread's
** idx-th heap list is stored.
*/
inline uint heapHeadIdx(in uint idx){
	return rsrcHeadIdx(heapIdxs_loc[idx]);
}

/*
** Returns the index in the heap buffer where the head of the thread's
** idx-th heap count is stored.
*/
inline uint heapCountIdx(in uint idx){
	return rsrcCountIdx(heapIdxs_loc[idx]);
}

/*
** Returns the index in the heap buffer where the index of the global heap list
** of the idx-th thread is stored
*/
inline uint heapIdxIdx(in uint idx){
	return RSRC_IDX_OFFSET + idx;
}

/*
** Returns the index in the task buffer where the head of the thread's
** idx-th task list is stored.
*/
inline uint taskQHeadIdx(in uint idx){
	return rsrcHeadIdx(taskQIdxs_loc[idx]);
}

/*
** Returns the index in the task buffer where the head of the thread's
** idx-th task count is stored.
*/
inline uint taskQCountIdx(in uint idx){
	return rsrcCountIdx(taskQIdxs_loc[idx]);
}

/*
** Returns the index in the task buffer where the index of the global task list
** of the idx-th thread is stored
*/
inline uint taskQIdxIdx(in uint idx){
	return RSRC_IDX_OFFSET + idx;
}




/// Memory Management Functions

// Returns the index of a free node from the largest local memory list
inline uint allocNode(){
	// Get the index of the head of the bigger list and set result to its value
	uint bigger = uint(heapCounts_loc[0]<heapCounts_loc[1]);
	uint result = heapHeads_loc[bigger];
	// If the result is non-null, its listed 'next' address is set as the head
	if(result != NOT_THERE){
		heapHeads_loc[bigger] = rawNode(result,0);
		heapCounts_loc[bigger]--;
	}
	return result;
}

// Adds the node at the given address to the smallest local memory list
inline void freeNode( in uint node ){
	uint smaller = uint(heapCounts_loc[0]>heapCounts_loc[1]);
	rawNode(node,0) = heapHeads_loc[smaller];
	heapHeads_loc[smaller] = node;
	heapCounts_loc[smaller]++;
}

/*
** Removes up to len nodes from the larger local memory list and adds it to
** the front of the smaller local memory list.
*/
inline void levelHeaps( in uint len ){
	// Find which lists are bigger than which
	uint bigger = uint(heapCounts_loc[0]<heapCounts_loc[1]);
	uint smaller = 1-bigger;
	// Calculate the difference in size
	uint diff = abs(((int) heapCounts_loc[0]) - ((int)heapCounts_loc[1]));
	// Set an iterator to the head of the larger list
	uint iter = heapHeads_loc[bigger];
	uint holder;
	// Traverse down the list diff-1 times
	for(uint i = 0; i < len; i++){
		if(i < diff - 1){
			iter = rawNode(iter,0);
		}
	}
	// Perform a swap between list heads only if there are nodes to be swapped
	if(diff > 0){
		holder = heapHeads_loc[bigger];
		heapHeads_loc[bigger] = rawNode(iter,0);
		rawNode(iter,0) = heapHeads_loc[smaller];
        heapHeads_loc[smaller] = holder;
		heapCounts_loc[smaller] += diff;
		heapCounts_loc[bigger] += diff;
	}
}

/*
** Pushes the head and count of the given heap to their corresponding location
** in the heap buffer.
*/
inline void pushHeap(in uint idx){
	HeapBuffer[heapHeadIdx(idx)] = heapHeads_loc[idx];
	HeapBuffer[heapCountIdx(idx)] = heapCounts_loc[idx];
}

/*
** Pulls the head and count of the given heap to their corresponding location
** in the heap buffer.
*/
inline void pullHeap(in uint idx){
	heapHeads_loc[idx] = HeapBuffer[heapHeadIdx(idx)];
	heapCounts_loc[idx] = HeapBuffer[heapCountIdx(idx)];
}

/*
** Rotates the memory heaps for the thread, shuffling data in global memory
** as well as swapping lists back and forth from global memory to local memory.
*/
inline void rotateHeaps(){
	// Prep heap data in heap buffer for swapping
	pushHeap(0);
	pushHeap(1);

	/*
	** Calculate the bit that will be flipped to find this thread's swapping
	** partner.
	*/
	uint swpIdx = id ^ swapBit;

	// Swaps the index of our first local list with our partner's swap list
     InterlockedExchange(
						HeapBuffer[heapIdxIdx(swpIdx)],
						heapIdxs_loc[0],
						heapIdxs_loc[0]
					);
	// Swaps the index of our first local list with that of our global swap list
	InterlockedExchange(
						HeapBuffer[heapIdxIdx(id)],
						heapIdxs_loc[1],
						heapIdxs_loc[1]
					);
	// Swaps the order of our two local lists
	uint temp = heapIdxs_loc[0];
	heapIdxs_loc[0] = heapIdxs_loc[1];
	heapIdxs_loc[1] = temp;

	// Sets the swapBit for the next swap execution
	swapBit = (swapBit >= THREAD_COUNT) ? 1 : (swapBit<<1);
	// Pulls the heads and counts of the new local lists
    pullHeap(0);
    pullHeap(1);
}




/// Task Management Functions

// Returns the index of a free node from the largest local task list
inline uint grabTask(){
	// Get the index of the head of the bigger list and set result to its value
	uint bigger = uint(taskQCounts_loc[0]<taskQCounts_loc[1]);
	uint result = taskQHeads_loc[bigger];
	// If the result is non-null, its listed 'next' address is set as the head
	if(result != NOT_THERE){
		taskQHeads_loc[bigger] = taskNext(result);
		taskQCounts_loc[bigger]--;
	}
	return result;
}


// Adds the node at the given address to the smallest local task list
inline void postTask( in uint node ){
	uint smaller = uint(taskQCounts_loc[0]>taskQCounts_loc[1]);
	taskNext(node) = taskQHeads_loc[smaller];
	taskQHeads_loc[smaller] = node;
	taskQCounts_loc[smaller]++;
}


/*
** Removes up to len nodes from the larger local task list and adds it to
** the front of the smaller local task list.
*/
inline void levelTasks( in uint len ){
	// Find which lists are bigger than which
	uint bigger = uint(taskQCounts_loc[0]<taskQCounts_loc[1]);
	uint smaller = 1-bigger;
	// Calculate the difference in size
	uint diff = abs(taskQCounts_loc[0]-taskQCounts_loc[1]);
	// Set an iterator to the head of the larger list
	uint iter = taskQHeads_loc[bigger];
	uint holder;
	// Traverse down the list diff-1 times
	for(uint i = 0; i < len; i++){
		if(i < diff - 1){
			iter = taskNext(iter);
		}
	}
	// Perform a swap between list heads only if there are nodes to be swapped
	if(diff > 0){
		holder = taskQHeads_loc[bigger];
		taskQHeads_loc[bigger] = taskNext(iter);
		taskNext(iter) = taskQHeads_loc[smaller];
        taskQHeads_loc[smaller] = holder;
		taskQCounts_loc[smaller] += diff;
		taskQCounts_loc[bigger] += diff;
	}
}



/*
** Pushes the head and count of the given heap to their corresponding location
** in the task buffer.
*/
inline void pushTaskQ(in uint idx){
	TaskBuffer[taskQHeadIdx(idx)] = taskQHeads_loc[idx];
	TaskBuffer[taskQCountIdx(idx)] = taskQCounts_loc[idx];
}

/*
** Pulls the head and count of the given heap to their corresponding location
** in the task buffer.
*/
inline void pullTaskQ(in uint idx){
	taskQHeads_loc[idx] = TaskBuffer[taskQHeadIdx(idx)];
	taskQCounts_loc[idx] = TaskBuffer[taskQCountIdx(idx)];
}

/*
** Rotates the memory heaps for the thread, shuffling data in global memory
** as well as swapping lists back and forth from global memory to local memory.
*/
inline void rotateTaskQs(){

	// Prep task data in the task buffer for swapping
	pushTaskQ(0);
	pushTaskQ(1);

	/*
	** Calculate the bit that will be flipped to find this thread's swapping
	** partner.
	*/
	uint swpIdx = id ^ swapBit;

	// Swaps the index of our first local list with our partner's swap list
    InterlockedExchange(
						TaskBuffer[taskQIdxIdx(swpIdx)],
						taskQIdxs_loc[0],
						taskQIdxs_loc[0]
					);
	// Swaps the index of our first local list with that of our global swap list
	InterlockedExchange(
						TaskBuffer[taskQIdxIdx(id)],
						taskQIdxs_loc[1],
						taskQIdxs_loc[1]
					);
	// Swaps the order of our two local lists
	uint temp = taskQIdxs_loc[0];
	taskQIdxs_loc[0] = taskQIdxs_loc[1];
	taskQIdxs_loc[1] = temp;

	// Sets the swapBit for the next swap execution
	swapBit = (swapBit >= THREAD_COUNT) ? 1 : (swapBit<<1);
	// Pulls the heads and counts of the new local lists
    pullTaskQ(0);
    pullTaskQ(1);
}




/// Unsigned Int Stack

/*
** Given the head node of the stack and the number of elements currently in
** the stack, it allocates a new node if necessary and stores val in the head
** node.
*/
inline void pushStackUint(inout uint top, inout uint count, in uint val){
	// This finds where in a head node's data field the value should be stored
	uint modPt = count % (NODE_SIZE - 1);
	uint result = top;
	// If the count rolls into a new node, it is allocated and made the head
    if( modPt == 0 ){
		result = allocNode();
		rawNode(result,0) = top;
		top = result;
    }
    // Stores the data
    DataBuffer[NODE_SIZE*top + 1 + modPt] = val;
    count++;
}


/*
** Given the head node of the stack and the number of elements currently in
** the stack, removes the top value, changing count and top if necessary and
** freeing nodes as necessary.
*/
inline void popStackUint(inout uint top, inout uint count){
	// This finds where in a head node's data field the value should be stored
	uint modPt = count % (NODE_SIZE - 1);
	uint result = top;
	// If the count rolls out of the current head node, it is made the new head
    if( modPt == 1 ){
		result = rawNode(top,0);
		freeNode(top);
		top = result;
    }
    count--;
}

// So we can read and write to the stack top cleanly
#define stackTopUint(top,count) DataBuffer[ NODE_SIZE * top + 1 + ( count % ( NODE_SIZE - 1 ) ) ]

// Traverses down the linked list making up the stack, freeing nodes as it goes
inline void destroyStackUint(inout uint top, inout uint count){
	uint iter = top;
	uint next;
	while(iter != NOT_THERE){
		next = rawNode(iter,0);
		freeNode(iter);
		iter = next;
	}
	top = NOT_THERE;
	count = 0;
}



/// Uvec3 Stack

/*
** Given the head node of the stack and the number of elements currently in
** the stack, it allocates a new node if necessary and stores val in the head
** node.
*/
inline void pushStackUvec3(inout uint top, inout uint count, in uvec3 val){
	// Find which triplet of fields in a head node val should be stored
	// (keep in mind, 16-1=15, which is divisible by 3), so no space is wasted
	uint modPt = (count * 3) % (NODE_SIZE - 1);
	uint result = top;
	// Allocate a new node and make it the head of the list, if necessary
    if( modPt == 0 ){
		result = allocNode();
		DataBuffer[NODE_SIZE*result] = top;
		top = result;
    }
    // load in the new data
    DataBuffer[NODE_SIZE*top + 1 + modPt] = val.x;
    DataBuffer[NODE_SIZE*top + 1 + 1 + modPt] = val.y;
    DataBuffer[NODE_SIZE*top + 1 + 2 + modPt] = val.z;
    count++;
}

/*
** Given the head node of the stack and the number of elements currently in
** the stack, removes the top value, changing count and top if necessary and
** freeing nodes as necessary.
*/
inline void popStackUvec3(inout uint top, inout uint count){
	uint modPt = (count * 3) % (NODE_SIZE - 1);
	uint result = top;
    if( modPt == 3 ){
		result = DataBuffer[NODE_SIZE*top];
		freeNode(top);
		top = result;
    }
    count--;
}

// Returns the uvec3 at the top of the stack
inline uvec3 readTopUvec3(inout uint top, inout uint count){
	uint idx = NODE_SIZE * top + 1 + ( (count * 3) % ( NODE_SIZE - 1 ) );
	return uvec3( 	DataBuffer[ idx ],
					DataBuffer[ idx + 1 ],
					DataBuffer[ idx + 2 ]
				);
}

// Overwrites the given uvec3 to the top of the stack
inline void writeTopUvec3(inout uint top, inout uint count, uvec3 data){
	uint idx = NODE_SIZE * top + 1 + ( (count * 3) % ( NODE_SIZE - 1 ) );
	DataBuffer[ idx ] = data.x;
	DataBuffer[ idx + 1 ] = data.y;
	DataBuffer[ idx + 2 ] = data.z;
}

// Traverses down the linked list making up the stack, freeing nodes as it goes
inline void destroyStackUvec3(inout uint top, inout uint count){
	uint iter = top;
	uint next;
	while(iter != NOT_THERE){
		next = DataBuffer[NODE_SIZE*iter];
		freeNode(iter);
		iter = next;
	}
	top = NOT_THERE;
	count = 0;
}



/// Voxel State Traversal Functions



/*
** Overwrites the given voxel address with the address of its child at the given
** relative position, unless that child is not in the Voxel State. Likewise, the
** relative position is changed to match the space of the child voxel, should
** the child actually exist in the Voxel State. Additionally, this function
** returns true if a new child was found and false if no child was found.
*/
inline bool childSeek(	inout uint voxel, inout vec3 position ){
	uint idx = 0;
	vec3 posStep = step(position,vec3(0.0,0.0,0.0));
	idx = uint(dot(posStep,vec3(1.0,2.0,4.0)));
	uint addr = voxelChild(voxel,idx);
	if(addr | NOT_THERE != NOT_THERE){
		voxel = addr;
		position = fmod(position,1.0) * 2.0;
		return true;
	}
    return false;
}

/// Program resource initialization/cleanup

inline void initYggCompute(){
	// Get our thread id

	// Remove any
	for(uint i = 0; i < RSRC_PER; i++){
		TaskBuffer[rsrcHeadIdx(id * RSRC_PER + i)] = NOT_THERE;
		TaskBuffer[rsrcCountIdx(id * RSRC_PER + i)] = 0;
	}

	/*
	** Assign the first and second heap and task list of the id-th available
	** triplet of heap and task lists.
	*/
	heapIdxs_loc[0] = id * RSRC_PER;
	heapIdxs_loc[1] = id * RSRC_PER + 1;
	taskQIdxs_loc[0] = id * RSRC_PER;
	taskQIdxs_loc[1] = id * RSRC_PER + 1;

	/*
	** Assign the third heap and task list of the id-th available triplet of
	** heap and task lists to be available in the id-th element of the
	** swapping section of their respective buffer .
	*/
	HeapBuffer[taskQIdxIdx(id)] = id * RSRC_PER + 2;
	TaskBuffer[taskQIdxIdx(id)] = id * RSRC_PER + 2;

	// Get the heads of each of our non-swapping lists
	pullHeap(0);
	pullHeap(1);
	pullTaskQ(0);
	pullTaskQ(1);
	// Set the swapBit to 1 so the first set of swaps will have valid pairings
	swapBit = 1;
}


inline void exitYggCompute(){
	/*
	** Push the thread's non-swapping heap memory to the heap buffer for
	** future use.
	*/
	pushHeap(0);
	pushHeap(1);
	/*
	** The task buffer's data should not need to be pushed back, as they should
	** all be empty. If this is not the case, then this is VERY BAD.
	*/
}






