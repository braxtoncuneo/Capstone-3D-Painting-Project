// 
#define CONVERT

#ifdef CONVERT
#define vec2	float2
#define vec3	float3
#define vec4	float4
#define uvec2	uint2
#define uvec3	uint3
#define uvec4	uint4
#define ivec2	int2
#define ivec3	int3
#define ivec4	int4
#define bvec2	bool2
#define bvec3	bool3
#define bvec4	bool4
#define mat4	float4x4 
#endif

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel main

// This should be replaced with the contents of CommonCode.comp
#include "HLSLCommon.compute"


/*
** The simplest of the shaders in Yggdrasil, the Memory Manager simply repeats
** a number of calls to levelHeaps and rotate heaps, hopefully leveling memory.
*/
[numthreads(GROUP_SIZE, 1, 1)]
void main(uint3 _id : SV_DispatchThreadID) {
	id = _id.x;

	uint X = id;
	uint A;
	uint B;
	if (id == 0) {
		HeapBuffer[0] = NOT_THERE;
	} 

	for (uint i = 0; i < 4; i++) {
		A = X;
		InterlockedExchange(
			HeapBuffer[0],
			A,
			B
		);
		X = B;
		DeviceMemoryBarrierWithGroupSync();
	}
	DeviceMemoryBarrierWithGroupSync(); 
	if (id == 0) {
		ExchangeBuffer[THREAD_COUNT] = HeapBuffer[0];
	}
	ExchangeBuffer[id] = X;
	DeviceMemoryBarrierWithGroupSync();

}


