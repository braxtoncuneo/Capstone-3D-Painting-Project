
#define CONVERT

#ifdef CONVERT
#define vec2	float2
#define vec3	float3
#define vec4	float4
#define uvec2	uint2
#define uvec3	uint3
#define uvec4	uint4
#define ivec2	int2
#define ivec3	int3
#define ivec4	int4
#define bvec2	bool2
#define bvec3	bool3
#define bvec4	bool4
#define mat4	float4x4 
#endif

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel main

// This should be replaced with the contents of CommonCode.comp
#include "HLSLCommon.compute"


#define MISSED_NODE				 	0x00000001
#define THREAD_INTERFERENCE 		0x00000002
#define TIME_INTERFERENCE 			0x00000004
#define ALLOC_DISCREPANCY			0x00000008
#define BAD_STACK					0x00000010
#define OVERALLOCD					0x00000020
#define COPIED						0x00000040
#define TOUCHED						0x80000000



int _loopNo;
static const uint loopNo = asuint(_loopNo);


/*
** The simplest of the shaders in Yggdrasil, the Memory Manager simply repeats
** a number of calls to levelHeaps and rotate heaps, hopefully leveling memory.
*/
[numthreads(GROUP_SIZE, 1, 1)]
void main(uint3 _id : SV_DispatchThreadID) {
	id = _id.x;

	initYggCompute();

	uint lastNode = NOT_THERE;
	uint nextNode;
	uint nowNode = NOT_THERE;
	uint count;
	uint status = TOUCHED;
	count = 0;
	uint a = NOT_THERE;
	uint b = NOT_THERE;

	/*
	if (id == 0) {
		HeapBuffer[0] = NOT_THERE;
	}*/

	for (uint i = 0; i < 1; i++) { 
		/* 
		lastNode = NOT_THERE; 
		nowNode = allocNode(); 
		if (nowNode != NOT_THERE) {
			rawNode(nowNode, 0) = lastNode; 
			rawNode(nowNode, 1) = id;
			rawNode(nowNode, 2) = i;
		}
		while (nowNode != NOT_THERE)
		{
			lastNode = nowNode;
			nowNode = allocNode();
			if (nowNode != NOT_THERE) {
				rawNode(nowNode, 0) = lastNode;
				rawNode(nowNode, 1) = id;
				rawNode(nowNode, 2) = i;
			}
			count++;
		}
		nowNode = lastNode;
		 
		while (nowNode != NOT_THERE)
		{
			if (rawNode(nowNode, 1) != id) {
				status |= THREAD_INTERFERENCE;
			}
			if (rawNode(nowNode, 2) != i) {
				status |= TIME_INTERFERENCE;
			}
			nextNode = rawNode(nowNode, 0);
			freeNode(nowNode);
			nowNode = nextNode; 
			count--;
		}
		if (count != 0) {
			status |= ALLOC_DISCREPANCY;
		}*/
		a = heapIdxs_loc[0];
		InterlockedExchange(
			HeapBuffer[0],
			heapIdxs_loc[0],
			b
		);
		DeviceMemoryBarrier();
		heapIdxs_loc[0] = b;
		//rotateHeaps();
	}
	ExchangeBuffer[id * 3] = heapIdxs_loc[0]; 
	ExchangeBuffer[id * 3 + 1] = heapIdxs_loc[1];
	ExchangeBuffer[id * 3 + 2] = /*status;//*/ HeapBuffer[heapIdxIdx(id)];

	/*
	status = TOUCHED;
	ExchangeBuffer[id] = TOUCHED;
	uint stackHead = NOT_THERE;
	uint stackCount = 0;
	uint k = 0;
	for (uint j = 1; j < 100; j++) {
		pushStackUint(stackHead, stackCount, id);
		k++;
	}

	while(stackHead != NOT_THERE) {
		if ( stackTopUint(stackHead, stackCount) != id ) {
			ExchangeBuffer[id] = stackHead;
		}
		popStackUint(stackHead, stackCount); 
		k--;
	} 
	if (k != 0) {
		ExchangeBuffer[id] = ( heapHeads_loc[0] == NOT_THERE ) ? heapHeads_loc[0] : heapHeads_loc[1];
	}
	*/
	exitYggCompute();

}


