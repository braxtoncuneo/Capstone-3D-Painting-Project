
#define CONVERT

#ifdef CONVERT
#define vec2	float2
#define vec3	float3
#define vec4	float4
#define uvec2	uint2
#define uvec3	uint3
#define uvec4	uint4
#define ivec2	int2
#define ivec3	int3
#define ivec4	int4
#define bvec2	bool2
#define bvec3	bool3
#define bvec4	bool4
#define mat4	float4x4 
#endif

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel main

// This should be replaced with the contents of CommonCode.comp
#include "HLSLCommon.compute"


#define MISSED_NODE				 	0x00000001
#define THREAD_INTERFERENCE 		0x00000002
#define TIME_INTERFERENCE 			0x00000004
#define TOO_MANY_FREED				0x00000008
#define TOO_FEW_FREED				0x00000010
#define OVERALLOCD					0x00000020
#define COPIED						0x00000040
#define TOUCHED						0x80000000



int _loopNo;
static const uint loopNo = asuint(_loopNo);


/*
** The simplest of the shaders in Yggdrasil, the Memory Manager simply repeats
** a number of calls to levelHeaps and rotate heaps, hopefully leveling memory.
*/
[numthreads(GROUP_SIZE, 1, 1)]
void main(uint3 _id : SV_DispatchThreadID) {
	id = _id.x;

	initYggCompute();

	uint lastNode = NOT_THERE;
	uint nextNode;
	uint nowNode = NOT_THERE;
	uint count;
	uint status = TOUCHED;

	count = 0;

	for (uint i = 0; i < 4; i++) {
		lastNode = NOT_THERE; 
		nowNode = allocNode();
		if (nowNode != NOT_THERE) {
			rawNode(nowNode, 0) = lastNode;
		}
		status = 0;

		while (nowNode != NOT_THERE)
		{
			if (id == 0) {
				ExchangeBuffer[count] = nowNode;
			}
			lastNode = nowNode;
			nowNode = allocNode();
			if (nowNode != NOT_THERE) {
				rawNode(nowNode, 0) = lastNode;
			}
			count++;
		}
		nowNode = lastNode;
		while (nowNode != NOT_THERE)
		{
			if (id == 0) {
				ExchangeBuffer[count] = nowNode;
			}
			nextNode = rawNode(nowNode, 0);
			freeNode(nowNode);
			nowNode = nextNode;
			count++;
		}
		status = count;
	}
	//ExchangeBuffer[id] = status;

	exitYggCompute();

}


